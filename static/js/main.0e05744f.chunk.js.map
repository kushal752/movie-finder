{"version":3,"sources":["components/Nav.js","components/SearchArea.js","components/Movie.js","components/MovieList.js","components/Pagination.js","components/MovieInfo.js","components/App.js","reportWebVitals.js","index.js"],"names":["Nav","className","href","SearchArea","props","action","onSubmit","handleSubmit","placeholder","type","onChange","handleChange","Movie","image","src","alt","style","width","height","onClick","viewMovieInfo","movieId","MovieList","movies","map","movie","i","id","poster_path","Pagination","pageLinks","active","currentPage","push","nextPage","pages","MovieInfo","closeMovieInfo","cursor","paddingTop","marginLeft","currentMovie","title","release_date","overview","App","e","fetch","apiKey","state","searchTerm","then","data","json","console","log","setState","results","totalResults","total_results","preventDefault","target","value","pageNumber","filteredMovie","filter","newCurrentMovie","length","process","numberPages","Math","floor","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e05744f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//This component will be a functional component\r\n//create div with a class of nav-wrapper(this is some kind of shortcut)\r\n//These classes are coming from the materialize CSS framework\r\n//Now go ahead and add a link there and give it a className brandlogo\r\n//We need to include the component into App.js and also export it\r\n//Include it inside the div in App.js\r\n//Our Navbar is completed!!\r\n//Then create the SearchArea.js inside the components folder\r\n\r\n\r\nconst Nav = () => {\r\n   return (\r\n     <nav>\r\n        <div className=\"nav-wrapper container\">\r\n            <a href=\"/#\" className=\"brand-logo\">Movie Finder</a>\r\n        </div>\r\n     </nav>\r\n   )\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\n\r\n//This component will be a functional components\r\n//We will be returning some JSX\r\n//Now we will create our div with classnames as container and rows\r\n//div.container for the outer container\r\n//create a section with some classes\r\n//Now Create a from and a div inside it and then an input\r\n//In input give a placeholder\r\n//Export this components\r\n//import it in App.js\r\n//and then place it inside the div\r\n\r\n\r\n//add property on form tag(onSubmit), when we press enter on search area we will run the function\r\n//function will be coming from props\r\n//function will be created in our app.js (3)\r\n\r\n//we'll need access to props (put props in const SearchArea =(props)....)\r\n//Add another property to our input(Onchange={props.handle......})\r\n//goto app.js\r\n\r\nconst SearchArea = (props) => {\r\n  return (\r\n    <div className=\"container\">\r\n        <div className=\"row\">\r\n            <section className=\"col s4 offset-s4\">\r\n                <form action=\"\" onSubmit={props.handleSubmit}>\r\n                    <div className=\"input-field\">\r\n                        <input placeholder=\"Search movie\" type=\"text\" onChange={props.handleChange}/>\r\n                    </div>\r\n                </form>\r\n            </section>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default SearchArea;\r\n","//can see more about \"cards\" on materializeCSS.com\r\n//we will add a default image if there is not a image for the movies\r\n//we will do some inline styling\r\n//In JSX we use style={}.....\r\n//Two curly braces inside style so it will be an object\r\n//img src can be fond on MovieDB website and we need to add it to whatever path we get from the API data\r\n//We then add some javascript, we added backticks instead of quotes\r\n//add the image path (${props.image}) that we get from the API data\r\n\r\n\r\n//Add onClick for the view details button, pass an anonymous function which gets triggered when clicked\r\n//then add props.viewMovieInfo, pass the argument props.movieId\r\n//then go to movieInfo.js\r\n\r\n\r\nimport React from 'react';\r\n\r\n\r\nconst Movie = (props) => {\r\n  return(\r\n    <div className=\"col s12 m6 l3\">\r\n      <div className=\"card\">\r\n        <div className=\"card-image waves-effect waves-block waves-light\">\r\n            {\r\n              props.image == null ? <img src={`https://s3-ap-southeast-1.amazonaws.com/upcode/static/default-image.jpg`} alt=\"card image\" style={{ width: \"100%\", height: 360}} />: <img src={`http://image.tmdb.org/t/p/w185${props.image}`} alt=\"card image\" style={{ width: \"100%\", height: 360}} />\r\n            }\r\n        </div >\r\n\r\n        <div className=\"card-content\">\r\n            <p><a href=\"#\" onClick={() => props.viewMovieInfo(props.movieId)}>View Details</a></p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Movie;\r\n","//this will be a functional component, so const MovieList........\r\n//export it, then import in app.js and.....\r\n// then render it inside the div in app.js with other components\r\n\r\n\r\n//MovieList will render out the list of individual movie components\r\n//and For us to do that we need to pass in our movie data as a PROP to our MovieList component\r\n// goto (4) and come back from APP.js to where\r\n\r\n//Now we need to render out individual movie components by props.movies.map(())....\r\n//We are going to return an actual movie component (<Movie />) which will be created later\r\n\r\n//For Every movie object that we map through from our movies prop we are goinf to return a <Movie /> component\r\n//On our movie component we are going to pass a prop again\r\n//Since we are rendering a list we need to make sure that we add the key prop there for react....\r\n//....so that it doesn't give us any error messages\r\n\r\n//also add another prop for the images of the movies(its going to be a thumbnail with image and below with view details)\r\n//all we need is the image for this movie component\r\n//use the movie.poster_path property of the API\r\n//do this -----> import Movie from ./Movie\r\n\r\n\r\n//Whenever we write JSX we need to make sure that we return that\r\n\r\n\r\n//Add a new prop viewMovieInfo\r\n//add another prop movieId and pass the movie.id\r\n//We want to make use of the movie id because whenever we fire off our movieInfo component...\r\n//...we pass it a parameter or argument which is the id of the movie,...\r\n//...thats why we're passing another prop to our movie component called movieId\r\n//remember Movie comes from the movies array that we are mapping through\r\n//so we get the movie object and then we just grab the id of that movie\r\n//then go the movie component\r\n\r\n\r\n\r\n\r\n\r\nimport React from 'react';\r\nimport Movie from './Movie';\r\n\r\nconst MovieList = (props) => {\r\n  return(\r\n    <div className=\"container\">\r\n        <div className=\"row\">\r\n            <div className=\"col s12\">\r\n                {\r\n                  props.movies.map((movie, i) => {\r\n                      return(\r\n                        <Movie key={i} viewMovieInfo={props.viewMovieInfo} movieId={movie.id} image={movie.poster_path}/>\r\n                      )\r\n                  })\r\n                }\r\n            </div>\r\n        </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default MovieList;\r\n","//we are basically going to render out the pagination bar\r\n// create const pageLinks = [], it will be the number link on the pagination bar\r\n//array will hold all the li tags for that particular page number\r\n//create a for loop to go through all the pageLinks\r\n//create a variable active, it will contain a string called active which will be highlited if it is the current page\r\n//push the <li> tag inside pageLinks array\r\n//'waves-effect' is the class from google materialize class\r\n//we will add the active class so that if the current page is equal to the i then we set it active\r\n//add method onClick, we will do a function\r\n//whenever we click on that particular page link number we will run that nextPage method\r\n//add an anchor tag, give it the value of i, which will be the number for the page\r\n//Now we will return rest of the UI\r\n\r\n//For props.currentPage>1, we show previous pages\r\n//copy the <li> tag from above and past it, remove the key part from it\r\n//For props.currentPage<last page, we show next pages\r\n\r\nimport React from 'react';\r\n\r\nconst Pagination = (props) => {\r\n  let pageLinks = []\r\n\r\n  for(let i = 1; i <= props.pages + 1; i++){\r\n      let active = props.currentPage === i ? 'active' : '';\r\n\r\n      pageLinks.push(<li className={`waves-effect ${active}`} key={i} onClick={() => props.nextPage(i)}><a href=\"#\">{i}</a></li>)\r\n  }\r\n\r\n  return(\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n          <ul className=\"pagination\">\r\n            {props.currentPage > 1 ? <li className={`waves-effect`} onClick={() => props.nextPage(props.currentPage - 1)}><a href=\"#\">Prev</a></li> : ''}\r\n            {pageLinks}\r\n            {props.currentPage < props.pages + 1 ? <li className={`waves-effect`} onClick={() => props.nextPage(props.currentPage + 1)}><a href=\"#\">Next</a></li> : ''}\r\n\r\n          </ul>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Pagination;\r\n","//create a return statement, with divs and i tag(for \"go back\" button)\r\n//add a span tag, add some styles to it\r\n//add onClick functionality and add props to the div so that we can go back when clicked\r\n//also add some styles to that div\r\n//Then we add the Overview and Image of that movie component\r\n//check if it has a image otherwise add default image just like we did before\r\n\r\n//Create another div for the information of the movie inside some <p> tags\r\n\r\n//change the date format at last\r\n\r\nimport React from 'react';\r\n\r\nfunction swap(arr,from,to){\r\n  arr.splice(from,1,arr.splice(to,1,arr[from])[0]);\r\n}\r\n\r\nconst MovieInfo = (props) => {\r\n  return(\r\n    <div className=\"container\">\r\n      <div className=\"row\" onClick={props.closeMovieInfo} style={{cursor: \"pointer\", paddingTop: 50}}>\r\n          <i className=\"fas fa-arrow-left\"></i>\r\n          <span style={{marginLeft: 10}}>Go Back</span>\r\n      </div>\r\n      <div className=\"row\">\r\n          <div className=\"col s12 m4\">\r\n          {props.currentMovie.poster_path === null ? <img src={`https://s3-ap-southeast-1.amazonaws.com/upcode/static/default-image.jpg`} alt=\"Card image\" style={{width: \"100%\",\r\n             height: 360}}/> : <img src={`http://image.tmdb.org/t/p/w185${props.currentMovie.poster_path}`} alt=\"Card image\" style={{width: \"100%\", height: 360}}/>}\r\n          </div>\r\n          <div className=\"col s12 m8\">\r\n              <div className=\"info-container\">\r\n                  <p>{props.currentMovie.title}</p>\r\n                  <p>{props.currentMovie.release_date}</p>\r\n                  <p>{props.currentMovie.overview}</p>\r\n              </div>\r\n          </div>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MovieInfo;\r\n","\n///////////////////////////////CONSTRUCTOR/////////////////////////////////////\n//The constructor in a React component is called before the component is mounted.\n// When you implement the constructor for a React component,\n//you need to call super(props) method before any other statement.\n//If you do not call super(props) method, this. props will be undefined,\n//in the constructor and can lead to bugs\n\n\n//So, we can achieve two purposes with the constructor function.\n//Set the initial state of the component\n//Point the global context of this keyword\n///////////////////////////////CONSTRUCTOR/////////////////////////////////////\n\n\n\n//first we set up the constructor\n//then we gonna set up our state\n//our state will contain an array of movie objects\n\n\n//(3)we will create a function here now from searchArea.js\n//and we're gonna pass this function as a prop to our searchArea component\n\n//Now we will setup our API key\n//In constructor set property called this.apiKey and set this equal to the API we got from MovieDB\n\n//WHEN USING API's, we wanna create some .env file where you have all your credentials and all your constants\n//.env is private so we won't push to github repos or anything\n//Put the value of API key in .env file against REACT_APP_API\n\n//Now we will create our handleSubmit button\n//then we will (fetch) i.e make request to the movieDB API\n// put variable--->${this.apiKey} in the fetch method and then\n//fetch method is a promise based method so we have access to (.then) method\n//convert the http response to json format using json() method\n//Once we get the data from the movieDB API, we want to set the state in our application\n//To do that: this.setState..... for the movies array\n//spread operator (...) helps in spreading out the contents from this results array into the new array\n//Now we have created the handleSubmit method and now we will set that as a prop on the searchArea component\n//Handle submit will take a event which is whenever we submit it and do a preventDefault\n//i.e. we will add preventDefault whenever we submit the form\n\n//'e' is the argument of an event handler you attach to a certain event on a certain component\n//Events are objects with certain properties, and e.target almost always represents a DOM element.\n//Thus e.target.value is the value property of some DOM element,\n //in this case that means the text entered in the search input.\n\n\n//e.target.value will be the whatever the key stroke or the key value is or whatever we're typing\n\n\n// Now we create the handleChange method\n//It will handle the change when we type in the search area component\n//again we will add another prop to the searchArea component i.e. this.handleChange\n\n\n//(4) In our movieList component we pass a prop movies={this.state.movies}\n//The movie data is coming from our state in our App component so we use {this.state.movies}\n\n\n\n//////////////////////////////////////PAGINATION//////////////////////////////////////////\n//add (totalResults) and (currentPage) inside this.state\n//Create the method (nextPage) which will be fired when we click next page or next page number\n//Whenever it fires we will make a fetch an AJAX request to the movieDB API\n//In the fetch request inside next page we add a page parameter(&page=${pageNumber})\n//and then add the pageNumber argument that we pass in to the method\n//inside (this.setState) add the (currentPage: pageNumber)\n//Now in the handle submit button we update the totalResults property in our state\n\n//Now we create a component called PAGINATION, first export it\n//create a varibale inside render called numberPages which will hold the number of pages based on the number of movies that we get from the API\n//now we add pagination inside render, we add a conditional there\n//if total movies is greter than 20 then we add pagination\n//we then add methods (PROPS) like (pages={numberPages}) inside the pagination component\n//if no. of movies is <=20 then we just display an empty string i.e. we won't display anything\n\n\n/////////////////////////////VIEW MOVIE DETAILS COMPONENT//////////////////////////////////\n//add currentMovie property to the this.state\n//Now we will build some methods, first one will be viewMovieInfo\n//this method will set current movie to the one on which we click on\n//viewMovieInfo will take an (id), this will be the id of the movie\n//filter function to check if the given id matches with the required movie id\n//newCurrentMovie, it will be set to the movie it clicked if a matching id is found else it will be set to null\n//then perform the given operation -----> this.setState ({currentMovie: filteredMovie})\n\n\n///////////////////////CLOSE MOVIE INFO COMPONENT//////////////////////////////////\n//set the currentMovie to null----> this.setState({currentMovie: null})\n\n\n//Now do some editing in the render components\n//we need to make a process, which will show the home page with movies if currentMovie is null\n//else we will display the view details component\n//Now add a prop to the MovieList component, it will be viewMovieInfo\n//pass that method as a prop to the movieList and then we're going to pass from the movieList,.....\n//.... that prop method down to the Movie component\n//i.e. click on the Movie component and fire off that viewMovieInfo method\n//put all these things inside a div and put that div inside the condtion statement\n//if true then show the div otherwise show the <MovieInfo /> component\n// pass the method closeMovieInfo inside the <MovieInfo /> component\n//after that go to MovieList.js to pass the defined props\n\n\n\n\nimport React, { Component } from 'react';\nimport Nav from './Nav'\nimport SearchArea from './SearchArea'\nimport MovieList from './MovieList'\nimport Pagination from './Pagination'\nimport MovieInfo from './MovieInfo'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      movies: [],\n      searchTerm: '',\n      totalResults: 0,\n      currentPage: 1,\n      currentMovie: null,\n    }\n    this.apiKey = process.env.REACT_APP_API\n  }\n\n  handleSubmit = (e) => {\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=${this.apiKey}&query=${this.state.searchTerm}`)\n      .then(data => data.json())\n      .then(data => {\n        console.log(data);\n        this.setState({ movies: [...data.results], totalResults: data.total_results})\n      })\n      e.preventDefault()\n  }\n\n  handleChange = (e) => {\n      this.setState({searchTerm: e.target.value})\n  }\n\n  nextPage = (pageNumber) => {\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=${this.apiKey}&query=${this.state.searchTerm}&page=${pageNumber}`)\n      .then(data => data.json())\n      .then(data => {\n        console.log(data);\n        this.setState({ movies: [...data.results], currentPage: pageNumber, totalResults: data.total_results})\n      })\n  }\n\n\n  viewMovieInfo = (id) => {\n    const filteredMovie = this.state.movies.filter(movie => movie.id === id)\n\n    const newCurrentMovie = filteredMovie.length > 0 ? filteredMovie[0] : null\n\n    this.setState({ currentMovie: newCurrentMovie})\n  }\n\n  closeMovieInfo = () => {\n    this.setState({currentMovie: null})\n  }\n\n\n\nrender() {\n  let numberPages = Math.floor(this.state.totalResults / 20);\n\n  return (\n    <div className=\"App\">\n        <Nav />\n        {this.state.currentMovie === null ? <div> <SearchArea handleSubmit={this.handleSubmit} handleChange={this.handleChange}/><MovieList viewMovieInfo={this.viewMovieInfo} movies={this.state.movies}/></div> : <MovieInfo currentMovie={this.state.currentMovie}closeMovieInfo={this.closeMovieInfo} />}\n        {this.state.totalResults > 20 && this.currentMovie===null ? <Pagination pages={numberPages} nextPage={this.nextPage} currentPage={this.state.currentPage} /> : ''}\n    </div>\n  );\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}